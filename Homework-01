题目：
一、实验题目： 文本处理
    以题目给定的文件paper.txt为例，实现对任意文本文件的各项处理功能。
二、功能要求：
主函数提供功能菜单供用户选择，用户可以选择调用以下各个功能，也可以选择继续或退出程序。系统应提供以下功能：
（1）	浏览文件内容：将文件内容显示在屏幕上；
（2）	复制文本：先输入要复制文本的起始位置和字符个数，然后再输入要粘贴到的目的位置，实现粘贴。允许不断输入粘贴位置，实现多次粘贴，直到用户选择不再继续。每次粘贴后显示当前内容；
（3）	移动文本：输入要移动文本的起始位置和字符个数，以及要移动到的目的位置，实现文本的移动。移动后显示当前内容；
（4）	文本替换：输入要查找的文本和要替换为的新文本，实现整篇文本的替换，注意区分大小写。替换后显示当前内容；
（5）	统计单词个数和单词出现频度：统计并输出当前文本中单词的个数以及出现次数最多的前5个单词，不区分大小写。

注意：以下代码并非完全本人原创，且功能尚未完整，在功能完善且征得小组成员同意后完全开源。

功能（1）、（4）、（5）程序：
#include<stdio.h>
#include<string.h>					//处理字符串专用函数库
#include<stdlib.h>					//清屏、结束程序专用函数库 
#define MAX 1000					//定义暂存paper.txt的字符串数组最大大小为1000 
char files[MAX];					//全局变量files，在主函数赋值为文件中的字符
char paper[10]="paper.txt";
//可以令文件指针fp为全局变量，但fp可能为因为某些操作被修改，为了保险起见后期再调试优化 
		/*以下函数整个程序中均可调用*/ 
int getin_string(char files[]);		//将文件内容输入数组的函数，返回值是全文字符数 
void menu();						//定义打印菜单的函数
void replace(char files[]);         //文本替换函数
void statistics(char files[]);      //统计函数
int max(int first,int count);                 //求数组中第n大数字函数
void browse_file();					//定义浏览文件的函数
int browse_string(char *files);		//定义浏览字符串数组的函数
//这两种函数按需要用
int main()
{
	char n;							//为了只读取第一个字符，定义为char类型
	while(1)
	{
		menu();
		scanf("%c",&n);
		system("cls");
		switch(n)
		{
			case '1':browse_file();break;
			case '2':/*函数2.复制文本*/;break;
			case '3':/*函数3.移动文本*/;break;
			case '4':replace(files);break;
			case '5':statistics(paper);break;
			case '6':exit(0);//结束程序 
		}
		fflush(stdin);//清除缓冲区 
		system("cls");//清屏 
	}
}
void menu()
{
	printf("*****************************\n");
	printf("下面是功能菜单（请输入数字）:\n");
	printf("1.浏览文章内容\n");
	printf("2.复制文本\n");
	printf("3.移动文本\n");
	printf("4.文本替换\n");
	printf("5.统计单词个数和单词出现频度\n");
	printf("6.退出\n");
	printf("******************************\n");	
}
void browse_file()
{
	char ch; 
	FILE *fp;
    if ((fp = fopen(paper, "r")) == NULL)
	{
		fprintf(stdout,"Can't open \"list.txt\" file.\n");
		exit(0);
	}
	while (( ch = getc(fp)) != EOF)     
		putchar(ch); 					//处理输入
	fclose(fp);
	getchar();							//让程序不至于一闪儿过 ，即 
	getchar();							//等待返回 
} 
int browse_string(char *files)
{
	int i;
	i=getin_string(files);
	files[i]='\0';
	puts(files);
	return i;
}
int getin_string(char files[])			
{
	int i=0;
	FILE *fp;
    if ((fp = fopen(paper, "r")) == NULL)
	{
		fprintf(stdout,"Can't open \"list.txt\" file.\n");
		exit(0);
	}		
	for(i=0;fscanf(fp,"%c",files+i)!=EOF;i++);	//将文件内容输入数组
	fclose(fp);
	return i;									//返回值是全文字符数
}

void replace(char files[]){//文本替换函数
    int length;
    length=getin_string(files);//整个文本字符串长度
    int i,j,k,flag,loca=0;//flag代表是否已经完成替换
    char temporary[MAX];//定义字符型数组暂时存储文章内容
    char replaced[20]="\0",placed[20]="\0";//定义被替换和替换的字符数组
    printf("请输入被替换组字符串：\n");
    fflush(stdin);//清空缓存区，防止gets函数读入上一个回车
    gets(replaced);
    printf("请输入替换的字符串：\n");
    fflush(stdin);//清空缓存区，防止gets函数读入上一个回车
    gets(placed);
    for(i=0;i<strlen(files);i+=loca){
        if(files[i]==replaced[0]){
            flag=0;
            for(j=i,k=0;k<strlen(replaced);j++,k++){
                if(files[j]!=replaced[k]){
                    flag=1;
                    loca=k;
                    break;
                }
            }//定位要替换的字符
            if(flag==0){ 
                for(j=i+strlen(replaced),k=0;j<strlen(files);j++,k++){
                    temporary[k] = files[j];
                }
                temporary[k]='\0';
                for(j=i,k=0;k<strlen(placed);j++,k++){ // 逐个替换
                    files[j]=placed[k];
                }
                for(k=0;k<strlen(temporary);j++,k++){
                    files[j]=temporary[k];
                }
                files[j]='\0';
                loca=strlen(replaced);
            }
        }else{
            loca=1;
        }
    }
    puts(files);
    getchar();   //如函数“browse_file”。让程序不至于一闪而过，即等待返回
    getchar();
    }//运行结束后，形参占用内存释放，files内容不受影响

int number(){//统计文章单词个数
    int count=0;
    char data[20];
    FILE *fp;
    if ((fp = fopen(paper, "r")) == NULL)
	{
		fprintf(stdout,"Can't open \"list.txt\" file.\n");
		exit(0);
	}//来自函数“getin_string”
    while(feof(fp)==0){//统计单词个数（程序来源：第五个需求第一版本代码）
        if(fscanf(fp,"%s",data)!=1){//fscanf:根据数据格式(format)，从输入流(stream)中读入数据，存储到argument中，遇到空格和换行时结束。失败返回EOF；
            break;//如果检测出不是英文单词，则退出循环，进入统计部分
        }
        count++;
    }
    return count;
}

void statistics(char files[]){//统计函数
    char text;//从文件中读取字符
    int i=0,j=0,m,n,k,flag,count=0,l=0;
    int temp; //冒泡排序法使用
    char temporary[20];//冒泡排序法使用
    struct words{
        int word_count;
        char word[20];
    }words[350];
    for(i=0;i<350;i++){
        words[i].word_count=1;
    }//遍历数组
    char data[20];
    FILE *fp;
    if ((fp = fopen(paper, "r")) == NULL)
	{
		fprintf(stdout,"Can't open \"list.txt\" file.\n");
		exit(0);
	}//来自函数“getin_string”

    flag=0;
    i=0;
    while(feof(fp)==0){       
        text=fgetc(fp);
        words[i].word[j]='\0';
        if(text>=65&&text<=90||text>=97&&text<=122){
            words[i].word[j]=text;
            j++;
            flag=1;
        }else if(text==' '&&flag==1){   
            flag=0;
            j=0;
            n=i;
            i++;
            if(n>=1){//比较单词
                for(m=0;m<n;m++){
                    if(strcmp(words[n].word,words[m].word)==0){                                
                    words[m].word_count++;
                    i=i-1;
                    }
                }                     
            }
        }
    }
    count=number();
    printf("单词个数：%d\n",count);
    /*冒泡排序法*/
    for(n=0;n<i-1;n++){
        k=n;
        for(j=n+1;j<i;j++)
            if(words[j].word_count>words[k].word_count){
                k=j;
                temp=words[k].word_count;
                words[k].word_count=words[n].word_count;
                words[n].word_count=temp;
                strcpy(temporary,words[k].word);
                strcpy(words[k].word,words[n].word); 
                strcpy(words[n].word,temporary);//相应的，利用冒泡排序法将单词和出现频次对应起来 
            }       
    }
    printf("出现最多次的五个单词：\n");
    for(i=0;i<5;i++){
        printf("%8s:",words[i].word);
        printf("%d\n",words[i].word_count);
    }
    getchar();   //如函数“browse_file”。让程序不至于一闪而过，即等待返回
    getchar();
}

